---
title: "Generación con R de tablas y gráficos listos para publicar"
subtitle: "VIV Seminario Análisis de datos avanzados en Ciencias de la Salud"
author: "Emilio L. Cano"
affiliation: "Data Science Lab - URJC"
date: "2024-10-22"
lang: es
format: 
  html:
    self-contained: true
editor: visual
bibliography: 
  - references.bib
  - packages.bib
---

```{r}
#| label: setup
#| include: false
#| purl: false
library(knitr)
opts_chunk$set(out.width = "80%", 
               fig.align = 'center')
```

# Introducción

Este documento es el material de la sesión "Generación con R de tablas y gráficos listos para publicar" del VII Seminario Análisis de datos avanzados en Ciencias de la Salud celebrado en la Facultad de Ciencias de la Salud de la Universidad Rey Juan Carlos en el Campus de Alcorcón en octubre de 2024.

En los proyectos de Ciencia de Datos, está bastante aceptado el flujo de trabajo que se describe en [@wickham2016] y que se muestra en la figura.

```{r}
#| label: dsflow
#| echo: false
#| purl: false

include_graphics("img/data-science.png")
```

A menudo en las fases previas a "Comunicar" vamos haciendo nuestros análisis de datos y generando resultados intermedios en forma de tablas y gráficos que nos da igual estén bonitos o más feos. Pero a la hora de preparar los resultados finales para esa fase de comunicación (que puede ser un artículo científico, una presentación de un congreso, o simplemente un documento interno) sí hace falta presentar los resultados en tablas y gráficos que sean efectivos para comunicar la historia que nos están contando los datos.

Las salidas "estándar" de R a veces no son suficientes para esta preparación, y muchos analistas optan por preparar ese formato final con otros programas (Word, Excel, etc.) para tener el resultado deseado. Pero con algunos paquetes especializados podemos tener una presentación final impactante de nuestros análisis, y eso es lo que vamos a aprender en esta sesión del seminario.

# Preparación del entorno

Debes tener R y RStudio instalado en tu ordenador, preferiblemente las últimas versiones. Estas son las que se han utilizado para generar este material:

```{r}
#| purl: false
R.Version()$version.string
# rstudioapi::versionInfo()$version -> 2022.10.0.9
```

Alternativamente, puedes utilizar [rstudio.cloud](https://rstudio.cloud), creando una cuenta gratuita. Funciona en el navegador sin tener que preocuparse de dependencias del sistema operativo.

Además, vamos a utilizar los siguientes paquetes. Posiblemente algunos ya los tengas instalados. Puedes hacerlo al principio o instalar cada uno antes de usarlo la primera vez con la función `install.packages()`.

```         
palmerpenguins
summarytools
flextable
kablextra
gt
gtsummary
ggstatsplot
quarto
dplyr
```

El paquete `dplyr` lo usaremos para manipular los datos.

::: callout-note
Para seguir el material, puedes crear un proyecto vacío de RStudio, o crearlo a partir de este material que se encuentra en GitHub. En el primer caso, tendrás que crear un script e ir pegando el código de este documento. En el segundo, puedes abrir el script \``index.R`\` que ya contiene el código e ir ejecutándolo directamente.
:::

# Datos de ejemplo

En esta sesión utilizaremos para los ejemplos el conjunto de datos `penguins`, que se encuentra en el paquete {palmerpenguins} (@R-palmerpenguins). Vamos a revisar la descripción de los datos en la propia web del paquete:

<https://allisonhorst.github.io/palmerpenguins/>

::: callout-tip
## Practica

Explora la documentación. Intenta entender qué significan las variables y qué tipos de datos nos encontramos.
:::

Ahora vamos a explorar los datos en el espacio de trabajo. Tenemos que cargar el paquete, y a partir de ahí lo podemos visualizar en la consola:

```{r}
library(palmerpenguins)
penguins
```

Para tenerlos disponibles en el espacio de trabajo, vamos a crear un objeto explícitamente:

```{r}
pingu <- penguins
```

::: callout-tip
## Practica

Abre la tabla de datos en el explorador de datos. Comprueba los tipos de datos y piensa qué tipo de tablas podrías hacer.
:::

No obstante, como la sesión va a ser muy práctica, te recomiendo que intentes reproducir los ejemplos con datos de tu propia investigación o interés. Deben estar en formato "rectangular", es decir, una columna para cada variable y una fila para cada observación, en un data.frame de R. A partir de ahí, solo tendrás que cambiar `pingu` por el nombre de tu data.frame y los nombres de las variables pingüineras por los tuyos.

# Formateo de tablas listas para publicar

Cuando "mandamos" una tabla de datos a la consola, tenemos un formato de texto plano que generalmente no nos sirve para insertar en una publicación decente. Entonces tenemos que darle un formato **adecuado** y **atractivo**.

Pero antes de nada, vamos a ver qué tipos de tablas podemos querer generar.

-   **Tablas de datos**. Si tenemos pocos datos, es posible que queramos mostrarlos todos en una tabla.

-   **Tablas resumen**. Si tenemos muchos datos, podemos querer mostrar un resumen de los estadísticos más relevantes.

-   **Tablas de frecuencias**. Son tablas de recuentos o proporciones (o porcentajes si multiplicamos por 100), que pueden tener totales de filas o columnas. Generalmente para datos de tipo cualitativo, pero también son adecuadas en datos cuantitativos discretos si hay pocos posibles valores, y en datos continuos agrupando en intervalos.

-   **Tablas de resultados de modelos**. Aquí puede ser muy variado: coeficientes de un modelo de regresión, de un ANOVA, etc.

-   **Tablas estandarizadas** de estudios específicos, por ejemplo ensayos clínicos.

::: callout-note
## Piensa

¿Se te ocurren más? ¿Usas tú alguna tabla más específica?
:::

Otra cuestión importante es en qué formato de salida queremos nuestra tabla. R va a generar las tablas en formato de texto plano con la estructura necesaria para que el formato de salida lo interprete. Hay muchos formatos, pero los más importantes son los siguientes:

-   $\LaTeX$. Se genera código latex para usar en documentos de este tipo.

-   HTML. Se genera código para archivos HTML que se abren en el navegador.

-   Word. Estas tablas se generan directamente dentro de un documento Word.

-   markdown. Es un formato que interpretan los formatos modernos como Rmarkdown y Quarto.

En RStudio se utiliza el programa `pandoc` para convertir entre formatos (no solo tablas, cualquier documento). Y el flujo habitual es crear el archivo (o tabla) en markdown, y de ahí convertir al formato final. Pero esto va a ser transparente para nosotros.

## Paquetes disponibles

Hay varios paquetes que se pueden utilizar para dar formato adecuado a las tablas y poder utilizarlo en las publicaciones. Entre ellos:

-   {xtable} (@R-xtable): Es un clásico, y antes de aparecer los más modernos era el preferido par LaTeX y html.

-   {knitr} (@R-knitr): Incorpora la función `kable()` para hacer tablas sencillas.

-   {kablextra} (@R-kablextra): Paquete que amplía la funcionalidad de la función `kable()` para crear tablas bien complejas. Muy centrado en formato de salida HTML.

-   {flextable} (@R-flextable): Tiene su propia gramática y se pueden hacer auténticas virguerías. La principal ventaja es que las tablas generadas en Word quedan muy bien.

-   {gt} (@R-gt): Creado por el equipo de RStudio que sigue la filosofía *tidy*. Mucho potencial, gramática parecida a {flextable}, pero no se termina de integrar bien con Word. Para HTML, la mejor opción.

-   {gtsummary} (\@R-gtsummary).

Por otra parte, hay paquetes que preparan los datos de la salida estándar en forma de tablas de datos, o directamente en tablas formateadas.

-   {broom} (@R-broom): La función `tidy()` guarda en un data.frame los coeficientes de un modelo, y la función `glance()` las principales métricas.

-   {summarytools} (@R-summarytools): Tiene funciones para obtener los resúmenes de datos más habituales.

-   {modelsummary} (@R-modelsummary): Centrado en formatear los resultados de modelos.

Por último antes de empezar con los ejemplos, hay que destacar que las funciones utilizadas producirán o bien texto en la consola, o bien HTML en el panel *Viewer*. Si insertamos el código en informes reproducibles Rmarkdown o quartom entonces tendremos la tabla integrada con el resto de narrativa y gráficos de la publicación.

## Tablas de datos con `knitr::kable()`

```{r}
#| message: false
library(dplyr)
library(knitr)
pingu |> 
  slice_head(n = 10) |> 
  kable()
```

::: callout-tip
## Practica

Prueba a cambiar opciones con los argumentos de la función.
:::

## Resúmenes de datos con {summarytools}

```{r}
#| results: asis
library(summarytools)
pingu |> 
  descr(bill_length_mm)
```

```{r}
#| results: asis
pingu |> 
  dfSummary()
```

## Tabla de frecuencias

Podemos crear todas las combinaciones de tablas con las funciones de R base, y formatearlas por ejemplo con {kablextra}:

```{r}
#| message: false
library(kableExtra)
pingu |> 
  select(species, sex) |> 
  table() |> 
  prop.table() |> 
  addmargins() |> 
  kable()
```

::: callout-info
Al cargar {kablextra} la función ´kable()´ sew "sobreescribe".
:::

Pero el paquete {summarytools} tiene una función que quizás os guste más:

```{r, results='asis'}
ctable(pingu$species, pingu$sex)
```

::: callout-tip
## Practica

Explora las opciones de la función.
:::

## Resúmenes de modelos

```{r}
#| message: false
library(flextable)
library(broom)
m <- pingu |> 
  lm(body_mass_g ~bill_length_mm + bill_depth_mm + sex, data = _ ) 
m |>
  tidy() |> 
  flextable()
```

```{r}
library(modelsummary)
modelsummary(m)
```

Ver más ejemplos: https://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html

# Gráficos listos para publicar

Podemos crear gráficos suficientemente bonitos e impactantes con {ggplot2}. Pero a veces requiere mucho "tuneo".

El paquete {ggstatsplot} (R-ggstatsplot) crea gráficos que incluyen detalles estadísticos que son muy convenientes para publicar.

```{r}
#| message: false
library(ggstatsplot)
pingu |> ggbarstats(x = species, y = sex)
```

```{r}
pingu |> ggpiestats(x = species, y = sex)
```

```{r}
pingu |> ggbetweenstats(species, body_mass_g)
```

::: callout-info
Aquí puede que os pida instalare algunos paquetes adicionales
:::

```{r}
m |> ggcoefstats()
```

::: tip
## Practica

Explora el resto de funciones del paquete.
:::

# Paquetes más especializados aún

-   Libro: https://r4csr.org/index.html

# Informes con quarto

1.  Crear documento

2.  Insertar chunks

3.  Insertar código

4.  Referencias cruzadas

# Referencias

```{r include=FALSE}
# automatically create a bib database for R packages
knitr::write_bib(c(
  .packages(),
  "quarto", "palmerpenguins",
  "xtable", "flextable", "knitr", "gt",
  "summarytools", "modelsummary", "broom", "kableExtra",
  "gtsummary"
), 
'packages.bib')
```
