---
title: "Generación con R de tablas y gráficos listos para publicar"
subtitle: "VII Seminario Análisis de datos avanzados en Ciencias de la Salud"
author: "Emilio L. Cano"
affiliation: "Data Science Lab - URJC"
date: "2024-10-22"
lang: es
toc: true
format: 
  html:
    self-contained: true
editor: visual
knitr: 
  opts_chunk: 
    warning: false
    message: false
bibliography: 
  - references.bib
  - packages.bib
---

```{r}
#| label: setup
#| include: false
#| purl: false
library(knitr)
opts_chunk$set(out.width = "80%", 
               fig.align = 'center')
```

# Introducción

Este documento es el material de la sesión "Generación con R de tablas y gráficos listos para publicar" del VII Seminario Análisis de datos avanzados en Ciencias de la Salud celebrado en la Facultad de Ciencias de la Salud de la Universidad Rey Juan Carlos en el Campus de Alcorcón en octubre de 2024.

En los proyectos de Ciencia de Datos, está bastante aceptado el flujo de trabajo que se describe en [@wickham2016] y que se muestra en la figura.

```{r}
#| label: dsflow
#| echo: false
#| purl: false

include_graphics("img/data-science.png")
```

A menudo en las fases previas a "Comunicar" vamos haciendo nuestros análisis de datos y generando resultados intermedios en forma de tablas y gráficos que nos da igual estén bonitos o más feos. Pero a la hora de preparar los resultados finales para esa fase de comunicación (que puede ser un artículo científico, una presentación de un congreso, o simplemente un documento interno) sí hace falta presentar los resultados en tablas y gráficos que sean efectivos para comunicar la historia que nos están contando los datos.

Las salidas "estándar" de R a veces no son suficientes para esta preparación, y muchos analistas optan por preparar ese formato final con otros programas (Word, Excel, etc.) para tener el resultado deseado. Pero con algunos paquetes especializados podemos tener una presentación final impactante de nuestros análisis, y eso es lo que vamos a aprender en esta sesión del seminario.

# Preparación del entorno

Debes tener R y RStudio instalado en tu ordenador, preferiblemente las últimas versiones. Estas son las que se han utilizado para generar este material:

```{r}
#| purl: false
R.Version()$version.string
# rstudioapi::versionInfo()$version -> 2022.10.0.9
```

Alternativamente, puedes utilizar [rstudio.cloud](https://rstudio.cloud), creando una cuenta gratuita. Funciona en el navegador sin tener que preocuparse de dependencias del sistema operativo.

Además, vamos a utilizar los siguientes paquetes. Posiblemente algunos ya los tengas instalados. Puedes hacerlo al principio o instalar cada uno antes de usarlo la primera vez con la función `install.packages()`.

```         
palmerpenguins
summarytools
flextable
kableExtra
gt
gtsummary
ggstatsplot
quarto
knitr
markdown
dplyr
modelsummary
report
effectsize
reactable
```

El paquete `dplyr` lo usaremos para manipular los datos.

::: callout-note
Para seguir el material, puedes crear un proyecto vacío de RStudio, o crearlo a partir de este material que se encuentra en GitHub\^\[Para ello debes pegar este enlace en el cuadro de diálogo de crear proyecto desde control de versiones: git\@github.com:emilopezcano/seminario_fcs_urjc_2024.git\]. En el primer caso, tendrás que crear un script e ir pegando el código de este documento. En el segundo, puedes abrir el script \``index.R`\` que ya contiene el código e ir ejecutándolo directamente.
:::

# Datos de ejemplo

En esta sesión utilizaremos para los ejemplos el conjunto de datos `penguins`, que se encuentra en el paquete {palmerpenguins} (@R-palmerpenguins). Vamos a revisar la descripción de los datos en la propia web del paquete:

<https://allisonhorst.github.io/palmerpenguins/>

::: callout-tip
## Practica

Explora la documentación. Intenta entender qué significan las variables y qué tipos de datos nos encontramos.
:::

Ahora vamos a explorar los datos en el espacio de trabajo. Tenemos que cargar el paquete, y a partir de ahí lo podemos visualizar en la consola:

```{r}
library(palmerpenguins)
penguins
```

Para tenerlos disponibles en el espacio de trabajo, vamos a crear un objeto explícitamente:

```{r}
pingu <- penguins
```

::: callout-tip
## Practica

Abre la tabla de datos en el explorador de datos. Comprueba los tipos de datos y piensa qué tipo de tablas podrías hacer.
:::

No obstante, como la sesión va a ser muy práctica, te recomiendo que intentes reproducir los ejemplos con datos de tu propia investigación o interés. Deben estar en formato "rectangular", es decir, una columna para cada variable y una fila para cada observación, en un data.frame de R. A partir de ahí, solo tendrás que cambiar `pingu` por el nombre de tu data.frame y los nombres de las variables pingüineras por los tuyos.




# Formateo de tablas listas para publicar

Cuando "mandamos" una tabla de datos a la consola, tenemos un formato de texto plano que generalmente no nos sirve para insertar en una publicación decente. Entonces tenemos que darle un formato **adecuado** y **atractivo**.

Pero antes de nada, vamos a ver qué tipos de tablas podemos querer generar.

-   **Tablas de datos**. Si tenemos pocos datos, es posible que queramos mostrarlos todos en una tabla.

-   **Tablas resumen**. Si tenemos muchos datos, podemos querer mostrar un resumen de los estadísticos más relevantes.

-   **Tablas de frecuencias**. Son tablas de recuentos o proporciones (o porcentajes si multiplicamos por 100), que pueden tener totales de filas o columnas. Generalmente para datos de tipo cualitativo, pero también son adecuadas en datos cuantitativos discretos si hay pocos posibles valores, y en datos continuos agrupando en intervalos.

-   **Tablas de resultados de modelos**. Aquí puede ser muy variado: coeficientes de un modelo de regresión, de un ANOVA, de los efectos, etc.

-   **Tablas estandarizadas** de estudios específicos, por ejemplo ensayos clínicos.

::: callout-note
## Piensa

¿Se te ocurren más? ¿Usas tú alguna tabla más específica?
:::

Otra cuestión importante es en qué formato de salida queremos nuestra tabla. R va a generar las tablas en formato de texto plano con la estructura necesaria para que el formato de salida lo interprete. Hay muchos formatos, pero los más importantes son los siguientes:

-   $\LaTeX$. Se genera código latex para usar en documentos de este tipo.

-   HTML. Se genera código para archivos HTML que se abren en el navegador.

-   Word. Estas tablas se generan directamente dentro de un documento Word.

-   markdown. Es un formato que interpretan los sistemas modernos como Rmarkdown y Quarto.

En RStudio se utiliza el programa `pandoc` para convertir entre formatos (no solo tablas, cualquier documento). Y el flujo de trabajo es crear el archivo (o tabla) en markdown, y de ahí convertir al formato final. Pero esto va a ser transparente para nosotros.

## Paquetes disponibles

Hay varios paquetes que se pueden utilizar para dar formato adecuado a las tablas a partir de un data.frame y poder utilizarlo en las publicaciones. Entre ellos:

-   {xtable} (@R-xtable): Es un clásico, y antes de aparecer los más modernos era el preferido par LaTeX y html (no lo usaremos aquí).

-   {knitr} (@R-knitr): Incorpora la función `kable()` para hacer tablas sencillas.

-   {kableExtra} (@R-kableExtra): Paquete que amplía la funcionalidad de la función `kable()` para crear tablas bien complejas. Muy centrado en formato de salida HTML.

-   {flextable} (@R-flextable): Tiene su propia gramática y se pueden hacer auténticas virguerías. La principal ventaja es que las tablas generadas en Word quedan muy bien.

-   {gt} (@R-gt): Creado por el equipo de RStudio que sigue la filosofía *tidy*. Mucho potencial, gramática parecida a {flextable}, pero no se termina de integrar bien con Word. Para HTML estático, la mejor opción.

Hay algunos paquetes con los que se pueden crear tablas interactivas, que permiten ordenar, paginar, filtrar, etc. En este caso solo para formato de salida HTML. {reactable} es una de las opciones, veremos un ejemplo.

Por otra parte, hay paquetes que preparan los datos de la salida estándar en forma de tablas de datos, o directamente en tablas formateadas.

-   {gtsummary} (@R-gtsummary): Amplía la funcionalidad de {gt} y produce tablas estandarizadas que se usan en muchos tipos de estudios. Por ejemplo, la habitual "Tabla 1" que describe los datos de un ensayo clínico.

-   {summarytools} (@R-summarytools): Tiene funciones para obtener los resúmenes de datos más habituales.

-   {modelsummary} (\@R-modelsummary): Produce tablas de resumen de datos, pero también de los resultados de modelos ajustados sobre los datos.

-   {report} (\@R-report): Este paquete produce textos completos (en inglés) interpretando los resultados de un modelo o análisis. Ideal para acompañar a una tabla.

-   {effectsize} (\@R-effectsize): Produce tablas con tamaño de efectos y multitud de métricas en formato de tabla.

-   {broom} (@R-broom): La función `tidy()` guarda en un data.frame los coeficientes de un modelo, y la función `glance()` las principales métricas.

Por último antes de empezar con los ejemplos, hay que destacar que las funciones utilizadas producirán o bien texto en la consola, o bien HTML en el panel *Viewer*. Si insertamos el código en informes reproducibles Rmarkdown o quarto, entonces tendremos la tabla integrada con el resto de narrativa y gráficos de la publicación.

# Informes con quarto

Para tener la tabla formateada en un formato de salida, tienes que crear un documento R Markdown o quarto, y así irás viendo el resultado en un formato de salida a medida que avancemos. Es recomendable trabajar con el formato HTML, que es más rápido, y al final ver cómo queda también en Word o PDF.

Por supuesto también se pueden generar las tablas desde un script, y después copiar desde el visualizador para pegar en otro programa.

::: callout-tip
## Practica

1.  Crear documento

2.  Insertar chunks (pegar el código de este documento)

3.  Insertar código

4.  Insertar referencias cruzadas
:::

# Uso de los paquetes y ejemplos

## Tablas de datos con `knitr::kable()`

```{r}
#| message: false
library(dplyr)
library(knitr)
pingu |> 
  slice_head(n = 10) |> 
  kable()
```

::: callout-tip
## Practica

Prueba a cambiar opciones con los argumentos de la función. Mira la ayuda de la función poniendo en la consola `?knitr`.
:::

## Resúmenes de datos con {summarytools}

```{r}
#| results: asis
library(summarytools)
pingu |> 
  descr(bill_length_mm)
```

```{r}
#| results: asis
pingu |> 
  dfSummary()
```

## Tabla de frecuencias

Podemos crear todas las combinaciones de tablas con las funciones de R base, y formatearlas por ejemplo con {kableExtra}:

```{r}
#| message: false
library(kableExtra)
pingu |> 
  select(species, sex) |> 
  table() |> 
  prop.table() |> 
  addmargins() |> 
  kable()
```

::: callout-info
Al cargar {kableExtra} la función ´kable()´ se "sobreescribe".
:::

Pero el paquete {summarytools} tiene la función `ctable()` que quizás os guste más:

```{r, results='asis'}
ctable(pingu$species, pingu$sex)
```

::: callout-tip
## Practica

Explora las opciones de la función (por ejemplo, para calcular las frecuencias condicionadas por columna en vez de por fila).
:::

## Tabla 1 con {gtsummary}

```{r}
library(gtsummary)
pingu |> 
  select(body_mass_g, species, bill_length_mm, sex) |> 
  tbl_summary(by = sex)
```

Más ejemplos: <https://www.danieldsjoberg.com/gtsummary/>.

## Resúmenes de modelos

Varios de los paquetes mencionados nos permiten extraer la información de los modelos. La siguiente expresión crea un modelo de regresión lineal:

```{r}
#| message: false
m <- pingu |> 
  lm(body_mass_g ~bill_length_mm + bill_depth_mm + sex, data = _ )
```

Con estas expresiones primero guardamos los coeficientes en una tabla, y después formateamos la tabla con {flextable}.

```{r}
library(flextable)
library(broom)
m |>
  tidy() |> 
  flextable()
```

::: callout-note
## Practica

Mira la ayuda y formatea las columnas.
:::

Con el paquete modelsummary sería así:

```{r}
library(modelsummary)
modelsummary(m)
```

Se pueden comparar varios modelos. Ver más ejemplos: <https://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html>

También el paquete {gtsummary} produce tablas de modelos (puede requerir que instales un paquete adicional):

```{r}
tbl_regression(m)
```

## Informes e interpretación

Hay un conjunto de paquetes llamado {easystats} que producen tanto tablas
como resúmenes textuales con la interpretación de los análisis estadísticos.
El paquete {effectsize} calcula y visualiza los efectos de un modelo, tanto
en forma de tabla como gráfica.

```{r}
library(effectsize)
cohens_d(body_mass_g ~ sex, data = pingu) 
interpret_cohens_d(-0.94)
```

```{r}
maov <- aov(body_mass_g ~ species, data = pingu)
eta_squared(maov)
interpret_eta_squared(0.67)
```

El paquete {report} devuelve párrafos completos, combinando toda la información

```{r}
library(report)
report(maov)
```


## Tablas interactivas

Hay varios paquetes que producen tablas interactivas para publicar en HTML, ya sea 
compartiendo el archivo que se abre en el navegador, o para publicar en la web.
{DT} es uno de los más populares, pero el paquete {reactable} está ganando terreno.

El siguiente código genera una tabla interactiva para explorar todo el 
dataset de los pingüinos.

```{r}
library(reactable)
pingu |> 
  reactable(filterable = TRUE,
            striped = TRUE)
```



# Gráficos listos para publicar

Podemos crear gráficos suficientemente bonitos e impactantes con {ggplot2}. Pero a veces requiere mucho "tuneo".

El paquete {ggstatsplot} (\@R-ggstatsplot) crea gráficos que incluyen detalles estadísticos que son muy convenientes para publicar.

```{r}
#| message: false
library(ggstatsplot)
pingu |> ggbarstats(x = species, y = sex)
```

```{r}
pingu |> ggpiestats(x = species, y = sex)
```

```{r}
pingu |> ggbetweenstats(species, body_mass_g, bf.message = FALSE)
```

::: callout-info
Aquí puede que os pida instalare algunos paquetes adicionales
:::

```{r}
m |> ggcoefstats()
```

::: tip
## Practica

Explora el resto de funciones del paquete.
:::

# Paquetes más especializados aún

-   Libro: [R for Clinical Study Reports and Submission](https://r4csr.org/index.html)



# Referencias

```{r include=FALSE}
# automatically create a bib database for R packages
knitr::write_bib(c(
  .packages(),
  "quarto", "palmerpenguins",
  "xtable", "flextable", "knitr", "gt",
  "summarytools", "modelsummary", "broom", "kableExtra",
  "gtsummary", "report", "modelsummary", "effectsize", "reactable",
  "ggstatsplot"
), 
'packages.bib')
```
